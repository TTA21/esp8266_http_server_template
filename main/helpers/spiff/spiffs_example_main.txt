/* SPIFFS filesystem example.
   This example code is in the Public Domain (or CC0 licensed, at your option.)

   Unless required by applicable law or agreed to in writing, this
   software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
   CONDITIONS OF ANY KIND, either express or implied.
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/unistd.h>
#include <sys/stat.h>
#include <dirent.h>
#include "esp_err.h"
#include "esp_log.h"
#include "esp_spiffs.h"


static const char *TAG = "example";
static const char* BASE_PATH = "";

void printDirectory(const char* directory ){
    const char* THIS_TAG = "printDirectory";
    ESP_LOGI(THIS_TAG, "Listing files in directory: %s", directory);
    DIR *dir;
    struct dirent *ent;
    if ((dir = opendir (directory)) != NULL) {
        /* print all the files and directories within directory */
        while ((ent = readdir (dir)) != NULL) {
            ESP_LOGI (THIS_TAG, "\t%s", ent->d_name);
        }
        closedir (dir);
    } else {
        ESP_LOGE(THIS_TAG, "Could not opendir(): %s", directory);
    }
}

void printSpiffsDetails(){
    const char* THIS_TAG = "printSpiffsDetails";
    size_t total = 0, used = 0;
    esp_err_t ret = esp_spiffs_info(NULL, &total, &used);
    if (ret != ESP_OK) {
        ESP_LOGE(THIS_TAG, "Failed to get SPIFFS partition information (%s)", esp_err_to_name(ret));
    } else {
        ESP_LOGI(THIS_TAG, "Partition size: total: %d, used: %d", total, used);
    }
}

bool writeTofile(const char* relative_directory, const char* content){
    const char* THIS_TAG = "writeTofile";

    char full_dir[32];
    strcpy(full_dir, BASE_PATH);
    strcpy(full_dir, relative_directory);

    ESP_LOGI(THIS_TAG, "Opening file: %s", full_dir);
    FILE* f = fopen(relative_directory, "w");
    if (f == NULL) {
        ESP_LOGE(THIS_TAG, "Failed to open file for writing");
        return false;
    }
    fprintf(f, content);
    fclose(f);
    ESP_LOGI(THIS_TAG, "File written");
    return true;
}

char* ReadFile(char *relative_directory)
{
    const char* THIS_TAG = "readTextFile";

    char full_dir[32];
    strcpy(full_dir, BASE_PATH);
    strcpy(full_dir, relative_directory);

    ESP_LOGI(THIS_TAG, "Opening file: %s", full_dir);
    FILE *handler = fopen(relative_directory, "rb");

    char *buffer = NULL;
    int string_size, read_size;

    if (handler)
    {
        // Seek the last byte of the file
        fseek(handler, 0, SEEK_END);
        // Offset from the first to the last byte, or in other words, filesize
        string_size = ftell(handler);
        // go back to the start of the file
        rewind(handler);

        // Allocate a string that can hold it all
        buffer = (char*) calloc(sizeof(char) * (string_size + 1), sizeof(char) );
        // Read it all in one operation
        read_size = fread(buffer, sizeof(char), string_size, handler);

        if (string_size != read_size)
        {
            // Something went wrong, throw away the memory and set
            // the buffer to NULL
            free(buffer);
            buffer = NULL;
            ESP_LOGE(THIS_TAG, "Something went wrong");
        }

        // Always remember to close the file.
        fclose(handler);
        ESP_LOGI(THIS_TAG, "File read successfully");
    }

    return buffer;
}

void app_main(void)
{
    ESP_LOGI(TAG, "Initializing SPIFFS");
    
    esp_vfs_spiffs_conf_t conf = {
      .base_path = BASE_PATH,
      .partition_label = NULL,
      .max_files = 5,
      .format_if_mount_failed = true
    };
    
    // Use settings defined above to initialize and mount SPIFFS filesystem.
    // Note: esp_vfs_spiffs_register is an all-in-one convenience function.
    esp_err_t ret = esp_vfs_spiffs_register(&conf);

    if (ret != ESP_OK) {
        if (ret == ESP_FAIL) {
            ESP_LOGE(TAG, "Failed to mount or format filesystem");
        } else if (ret == ESP_ERR_NOT_FOUND) {
            ESP_LOGE(TAG, "Failed to find SPIFFS partition");
        } else {
            ESP_LOGE(TAG, "Failed to initialize SPIFFS (%s)", esp_err_to_name(ret));
        }
        return;
    }
    
    printSpiffsDetails();

    writeTofile("root2.html", "<!DOCTYPE> <head>ASD<title></title></head><body>DSA</body>");
    printDirectory(BASE_PATH);

    char* file = ReadFile("root2.html");
    ESP_LOGI(TAG, "File Contents: %s", file);
    free(file);

    // All done, unmount partition and disable SPIFFS
    esp_vfs_spiffs_unregister(NULL);
    ESP_LOGI(TAG, "SPIFFS unmounted");
}
